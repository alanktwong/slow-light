package com.tacitknowledge.slowlight.embedded;

/**
 * User: witherspore
 * Date: 6/19/13
 * Time: 9:27 AM
 *
 * DegradationPlan is generated by the DegradationStrategy for EACH embedded call via the DegradationProxyHandler
 *
 * It provides specific values used to determine behavior for that specific call only, such as how long to delay it,
 * what error to return, exception to throw, etc
 *
 */
public class DegradationPlan {

    /**
     * Delay in millis for the specific call
     */
    private Long delay;
    /**
     * exception to throw for call, if shouldFail is true
     */
    private Exception randomException;
    /**
     * error object to returnfor call, if shouldFail is true and failurePriority is ERROR_OBJECT
     * @see FailurePriority
     */
    private Object errorObject;
    /**
     * Should this be a planned failure
     */
    private Boolean shouldFail = Boolean.FALSE;
    /**
     * should it fail immediately or wait for delay
     */
    private FastFail fastFail = FastFail.FALSE;

    /**
     * should it throw an exception or return an object on failure
     */
    private FailurePriority failurePriority = FailurePriority.EXCEPTION;

    public DegradationPlan(Long delay,
                           Exception randomException,
                           Object errorObject,
                           Boolean shouldFail,
                           FastFail fastFail,
                           FailurePriority failurePriority) {
        this.delay = delay;
        this.randomException = randomException;
        this.errorObject = errorObject;
        this.shouldFail = shouldFail;
        this.fastFail = fastFail;
        this.failurePriority = failurePriority;
    }

    public DegradationPlan(Long delay, Exception randomException, Object errorObject) {
        this(delay,randomException,errorObject,Boolean.FALSE,FastFail.FALSE,FailurePriority.EXCEPTION);
    }

    /**
     *
     * @return exception to throw
     */
    public Exception getRandomException() {
        return randomException;
    }

    /**
     *
     * @return millis to sleep/delay
     */
    public Long getDelay() {
        return delay;
    }

    /**
     * @return true if there is an exception configured in plan
     */
    private Boolean hasException() {
        return randomException != null;
    }

    /**
     *
     * @return true if there is an error object configured in plan
     */
    private Boolean hasErrorObject() {
        return errorObject != null;
    }

    /**
     *
     * @return the error object configured
     */
    public Object getErrorObject() {
        return errorObject;
    }

    /**
     * Tells the degradation handler whether this specific call should fail
     *
     * @return true if should fail
     */
    public Boolean hasPlannedFailure() {
        return shouldFail;
    }

    /**
     * either returns the error object or throws the exception for a failure as per priority and a non-null error object
     *
     * @return the error object
     * @throws Exception
     */
    public Object fail() throws Exception {
        if (FailurePriority.EXCEPTION == getFailurePriority() && getRandomException() != null)
            throw getRandomException();
        return getErrorObject();
    }

    /**
     * Should error objects or exceptions be thrown
     * @return FailurePriority
     */
    public FailurePriority getFailurePriority() {
        return failurePriority;
    }

    /**
     * Should this fail before the response delay or after the delay
     * @return FastFail.TRUE for early failure.  FastFail.FALSE for delayed failure
     */
    public FastFail getFastFail() {
        return fastFail;
    }
}
